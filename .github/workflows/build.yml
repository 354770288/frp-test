name: Build with Embedded FRP Binaries

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  download-frp:
    runs-on: ubuntu-latest
    outputs:
      frp-version: ${{ steps.get-version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get latest FRP version
      id: get-version
      run: |
        FRP_VERSION=$(curl -s https://api.github.com/repos/fatedier/frp/releases/latest | jq -r '.tag_name')
        echo "version=$FRP_VERSION" >> $GITHUB_OUTPUT
        echo "Latest FRP version: $FRP_VERSION"

    - name: Download FRP binaries
      run: |
        set -e
        mkdir -p binaries temp
        FRP_VERSION="${{ steps.get-version.outputs.version }}"
        
        # Define platforms and their corresponding archive names
        declare -A platforms=(
          ["linux/amd64"]="linux_amd64.tar.gz"
          ["linux/386"]="linux_386.tar.gz" 
          ["linux/arm64"]="linux_arm64.tar.gz"
          ["linux/arm"]="linux_arm.tar.gz"
          ["windows/amd64"]="windows_amd64.zip"
          ["windows/386"]="windows_386.zip"
          ["windows/arm64"]="windows_arm64.zip"
          ["darwin/amd64"]="darwin_amd64.tar.gz"
          ["darwin/arm64"]="darwin_arm64.tar.gz"
        )
        
        for platform_key in "${!platforms[@]}"; do
          archive="${platforms[$platform_key]}"
          goos=$(echo "$platform_key" | cut -d'/' -f1)
          goarch=$(echo "$platform_key" | cut -d'/' -f2)
          
          url="https://github.com/fatedier/frp/releases/download/${FRP_VERSION}/frp_${FRP_VERSION}_${archive}"
          
          echo "Processing $goos/$goarch (${archive})..."
          
          # Clean temp directory
          rm -rf temp/*
          
          if [[ $archive == *.zip ]]; then
            # Handle ZIP files (Windows)
            echo "Downloading ZIP: $url"
            if wget -q "$url" -O temp/archive.zip; then
              cd temp
              echo "Extracting ZIP archive..."
              if unzip -q archive.zip; then
                # Find frpc.exe in the extracted directory
                frpc_path=$(find . -name "frpc.exe" -type f | head -1)
                if [[ -n "$frpc_path" ]]; then
                  cp "$frpc_path" "../binaries/frpc_${goos}_${goarch}.exe"
                  echo "✓ Extracted frpc.exe for $goos/$goarch"
                else
                  echo "✗ frpc.exe not found in ZIP for $goos/$goarch"
                  ls -la
                fi
              else
                echo "✗ Failed to extract ZIP for $goos/$goarch"
              fi
              cd ..
            else
              echo "✗ Failed to download ZIP for $goos/$goarch"
            fi
          else
            # Handle TAR.GZ files (Linux/macOS)
            echo "Downloading TAR.GZ: $url"
            if wget -q "$url" -O temp/archive.tar.gz; then
              cd temp
              echo "Extracting TAR.GZ archive..."
              if tar -xzf archive.tar.gz; then
                # Find frpc in the extracted directory
                frpc_path=$(find . -name "frpc" -type f | head -1)
                if [[ -n "$frpc_path" ]]; then
                  cp "$frpc_path" "../binaries/frpc_${goos}_${goarch}"
                  chmod +x "../binaries/frpc_${goos}_${goarch}"
                  echo "✓ Extracted frpc for $goos/$goarch"
                else
                  echo "✗ frpc not found in TAR.GZ for $goos/$goarch"
                  ls -la
                fi
              else
                echo "✗ Failed to extract TAR.GZ for $goos/$goarch"
              fi
              cd ..
            else
              echo "✗ Failed to download TAR.GZ for $goos/$goarch"
            fi
          fi
        done
        
        echo "Final binaries:"
        ls -la binaries/
        echo "Binary count: $(ls binaries/ | wc -l)"

    - name: Upload FRP binaries
      uses: actions/upload-artifact@v4
      with:
        name: frp-binaries
        path: binaries/
        retention-days: 1

  build:
    needs: download-frp
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: windows
            goarch: amd64
            ext: .exe
            name: windows-amd64
          - goos: windows
            goarch: 386
            ext: .exe
            name: windows-386
          - goos: windows
            goarch: arm64
            ext: .exe
            name: windows-arm64
          - goos: darwin
            goarch: amd64
            ext: ""
            name: darwin-amd64
          - goos: darwin
            goarch: arm64
            ext: ""
            name: darwin-arm64
          - goos: linux
            goarch: amd64
            ext: ""
            name: linux-amd64
          - goos: linux
            goarch: 386
            ext: ""
            name: linux-386
          - goos: linux
            goarch: arm64
            ext: ""
            name: linux-arm64
          - goos: linux
            goarch: arm
            ext: ""
            name: linux-arm

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Download FRP binaries
      uses: actions/download-artifact@v4
      with:
        name: frp-binaries
        path: binaries/

    - name: Verify binaries
      run: |
        echo "Available binaries:"
        ls -la binaries/ || echo "No binaries directory found"
        
        # Check if the required binary exists
        required_binary="frpc_${{ matrix.goos }}_${{ matrix.goarch }}"
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          required_binary="${required_binary}.exe"
        fi
        
        if [[ -f "binaries/$required_binary" ]]; then
          echo "✓ Found required binary: $required_binary"
          file "binaries/$required_binary" || echo "File command not available"
        else
          echo "✗ Required binary not found: $required_binary"
          echo "This build will continue but the embedded binary won't work for this platform"
        fi

    - name: Get dependencies
      run: go mod tidy

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        
        # Set build info
        BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
        VERSION=${GITHUB_REF#refs/tags/}
        if [[ ! $VERSION =~ ^v[0-9] ]]; then
          VERSION="dev-$(git rev-parse --short HEAD)"
        fi
        FRP_VERSION="${{ needs.download-frp.outputs.frp-version }}"
        
        echo "Building with:"
        echo "  Version: $VERSION"
        echo "  Build Time: $BUILD_TIME"
        echo "  FRP Version: $FRP_VERSION"
        echo "  Target: ${{ matrix.goos }}/${{ matrix.goarch }}"
        
        go build \
          -ldflags="-s -w -X 'main.Version=$VERSION' -X 'main.BuildTime=$BUILD_TIME' -X 'main.FrpVersion=$FRP_VERSION'" \
          -o dist/frp-batch-tester-${{ matrix.name }}${{ matrix.ext }} \
          main.go
        
        echo "Built binary:"
        ls -la dist/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frp-batch-tester-${{ matrix.name }}
        path: dist/frp-batch-tester-${{ matrix.name }}${{ matrix.ext }}

  release:
    needs: [download-frp, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: frp-batch-tester-*
        path: artifacts
        merge-multiple: true

    - name: List files
      run: |
        echo "Release artifacts:"
        ls -la artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/*
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## FRP Batch Tester Release
          
          This release includes embedded FRP binaries from version `${{ needs.download-frp.outputs.frp-version }}`.
          
          ### Features
          - **Batch Testing Mode**: Run multiple frpc instances simultaneously
          - **Proxy Analysis Mode**: Intercept and analyze FRP protocol messages
          - **Embedded Binaries**: No need to download frpc separately
          - **Multi-Platform**: Support for Windows, macOS, and Linux
          
          ### Usage
          
          **Batch Testing:**
          ```bash
          ./frp-batch-tester --server your-server.com --token your-token --count 10
