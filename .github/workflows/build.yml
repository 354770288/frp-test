name: Build with Embedded FRP Binaries

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  download-frp:
    runs-on: ubuntu-latest
    outputs:
      frp-version: ${{ steps.get-version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get latest FRP version and assets
      id: get-version
      run: |
        echo "Fetching FRP release information..."
        RELEASE_JSON=$(curl -s https://api.github.com/repos/fatedier/frp/releases/latest)
        FRP_VERSION=$(echo "$RELEASE_JSON" | jq -r '.tag_name')
        
        echo "version=$FRP_VERSION" >> $GITHUB_OUTPUT
        echo "Latest FRP version: $FRP_VERSION"
        
        echo "Available assets:"
        echo "$RELEASE_JSON" | jq -r '.assets[].name' | sort
        
        echo "" > available_assets.txt
        echo "$RELEASE_JSON" | jq -r '.assets[].name' >> available_assets.txt

    - name: Download FRP binaries
      run: |
        set -e
        mkdir -p binaries temp
        FRP_VERSION="${{ steps.get-version.outputs.version }}"
        
        echo "=== Downloading FRP binaries for version $FRP_VERSION ==="
        
        # Get available assets
        RELEASE_JSON=$(curl -s https://api.github.com/repos/fatedier/frp/releases/latest)
        echo "$RELEASE_JSON" | jq -r '.assets[].name' > available_assets.txt
        
        echo "Available assets:"
        cat available_assets.txt
        echo ""
        
        # Define platforms we want to support
        declare -A platforms=(
          ["linux/amd64"]="linux_amd64"
          ["linux/386"]="linux_386"
          ["linux/arm64"]="linux_arm64"
          ["linux/arm"]="linux_arm"
          ["windows/amd64"]="windows_amd64"
          ["windows/386"]="windows_386"
          ["windows/arm64"]="windows_arm64"
          ["darwin/amd64"]="darwin_amd64"
          ["darwin/arm64"]="darwin_arm64"
        )
        
        for platform_key in "${!platforms[@]}"; do
          platform_suffix="${platforms[$platform_key]}"
          goos=$(echo "$platform_key" | cut -d'/' -f1)
          goarch=$(echo "$platform_key" | cut -d'/' -f2)
          
          echo "=== Processing $goos/$goarch (${platform_suffix}) ==="
          
          # Try to find the correct asset name
          if [[ "$goos" == "windows" ]]; then
            # For Windows, look for .zip files
            asset_name=$(grep "frp_${FRP_VERSION}_${platform_suffix}\.zip$" available_assets.txt || echo "")
          else
            # For Linux/macOS, look for .tar.gz files
            asset_name=$(grep "frp_${FRP_VERSION}_${platform_suffix}\.tar\.gz$" available_assets.txt || echo "")
          fi
          
          if [[ -z "$asset_name" ]]; then
            echo "‚ö†Ô∏è  Asset not found for $goos/$goarch (expected pattern: frp_${FRP_VERSION}_${platform_suffix})"
            echo "   Available assets matching pattern:"
            grep "$platform_suffix" available_assets.txt || echo "   No matching assets found"
            continue
          fi
          
          echo "‚úì Found asset: $asset_name"
          
          # Construct download URL
          url="https://github.com/fatedier/frp/releases/download/${FRP_VERSION}/${asset_name}"
          echo "üì• Downloading: $url"
          
          # Clean temp directory
          rm -rf temp/*
          
          # Download the file
          if ! wget -q --show-progress "$url" -O "temp/archive"; then
            echo "‚ùå Failed to download $asset_name"
            echo "   Checking if URL exists..."
            curl -I "$url" || echo "   URL check failed"
            continue
          fi
          
          echo "‚úì Downloaded successfully"
          
          # Extract based on file type
          cd temp
          if [[ "$asset_name" == *.zip ]]; then
            echo "üì¶ Extracting ZIP archive..."
            if unzip -q archive; then
              # Find frpc.exe in the extracted directory
              frpc_path=$(find . -name "frpc.exe" -type f | head -1)
              if [[ -n "$frpc_path" ]]; then
                cp "$frpc_path" "../binaries/frpc_${goos}_${goarch}.exe"
                echo "‚úÖ Extracted frpc.exe for $goos/$goarch"
              else
                echo "‚ùå frpc.exe not found in archive"
                echo "   Contents:"
                find . -type f | head -10
              fi
            else
              echo "‚ùå Failed to extract ZIP"
            fi
          else
            echo "üì¶ Extracting TAR.GZ archive..."
            if tar -xzf archive; then
              # Find frpc in the extracted directory
              frpc_path=$(find . -name "frpc" -type f -executable | head -1)
              if [[ -n "$frpc_path" ]]; then
                cp "$frpc_path" "../binaries/frpc_${goos}_${goarch}"
                chmod +x "../binaries/frpc_${goos}_${goarch}"
                echo "‚úÖ Extracted frpc for $goos/$goarch"
              else
                echo "‚ùå frpc not found in archive"
                echo "   Contents:"
                find . -type f | head -10
              fi
            else
              echo "‚ùå Failed to extract TAR.GZ"
            fi
          fi
          cd ..
          echo ""
        done
        
        echo "=== Download Summary ==="
        echo "Final binaries:"
        ls -la binaries/ || echo "No binaries created"
        echo "Total binaries: $(ls binaries/ 2>/dev/null | wc -l)"

    - name: Verify downloaded binaries
      run: |
        echo "=== Verifying Downloaded Binaries ==="
        if [[ -d binaries && $(ls binaries/ 2>/dev/null | wc -l) -gt 0 ]]; then
          for binary in binaries/*; do
            echo "üîç $binary:"
            echo "   Size: $(stat -c%s "$binary" 2>/dev/null || stat -f%z "$binary" 2>/dev/null || echo "unknown") bytes"
            echo "   Type: $(file "$binary" 2>/dev/null || echo "unknown")"
          done
        else
          echo "‚ö†Ô∏è  No binaries were successfully downloaded"
          echo "The build will continue, but embedded binaries may not work"
        fi

    - name: Upload FRP binaries
      uses: actions/upload-artifact@v4
      with:
        name: frp-binaries
        path: binaries/
        retention-days: 1

  build:
    needs: download-frp
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: windows
            goarch: amd64
            ext: .exe
            name: windows-amd64
          - goos: windows
            goarch: 386
            ext: .exe
            name: windows-386
          - goos: windows
            goarch: arm64
            ext: .exe
            name: windows-arm64
          - goos: darwin
            goarch: amd64
            ext: ""
            name: darwin-amd64
          - goos: darwin
            goarch: arm64
            ext: ""
            name: darwin-arm64
          - goos: linux
            goarch: amd64
            ext: ""
            name: linux-amd64
          - goos: linux
            goarch: 386
            ext: ""
            name: linux-386
          - goos: linux
            goarch: arm64
            ext: ""
            name: linux-arm64
          - goos: linux
            goarch: arm
            ext: ""
            name: linux-arm

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Download FRP binaries
      uses: actions/download-artifact@v4
      with:
        name: frp-binaries
        path: binaries/

    - name: Verify binaries for current platform
      run: |
        echo "=== Verifying Binary for ${{ matrix.goos }}/${{ matrix.goarch }} ==="
        echo "Available binaries:"
        ls -la binaries/ 2>/dev/null || echo "No binaries directory found"
        
        # Check if the required binary exists
        required_binary="frpc_${{ matrix.goos }}_${{ matrix.goarch }}"
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          required_binary="${required_binary}.exe"
        fi
        
        if [[ -f "binaries/$required_binary" ]]; then
          echo "‚úÖ Found required binary: $required_binary"
          file_size=$(stat -c%s "binaries/$required_binary" 2>/dev/null || echo "unknown")
          echo "   Size: $file_size bytes"
          if [[ "$file_size" -lt 1000000 ]]; then
            echo "‚ö†Ô∏è  Binary seems too small (< 1MB), may be corrupted"
          fi
        else
          echo "‚ö†Ô∏è  Required binary not found: $required_binary"
          echo "   This platform will be built without embedded frpc binary"
        fi

    - name: Initialize Go module
      run: |
        go mod init github.com/yourusername/frp-batch-tester
        go mod tidy

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        
        # Set build info
        BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
        VERSION=${GITHUB_REF#refs/tags/}
        if [[ ! $VERSION =~ ^v[0-9] ]]; then
          VERSION="dev-$(git rev-parse --short HEAD)"
        fi
        FRP_VERSION="${{ needs.download-frp.outputs.frp-version }}"
        
        echo "=== Building Binary ==="
        echo "  Version: $VERSION"
        echo "  Build Time: $BUILD_TIME"
        echo "  FRP Version: $FRP_VERSION"
        echo "  Target: ${{ matrix.goos }}/${{ matrix.goarch }}"
        
        go build \
          -ldflags="-s -w -X 'main.Version=$VERSION' -X 'main.BuildTime=$BUILD_TIME' -X 'main.FrpVersion=$FRP_VERSION'" \
          -o dist/frp-batch-tester-${{ matrix.name }}${{ matrix.ext }} \
          main.go
        
        echo "‚úÖ Built binary:"
        ls -la dist/
        
        # Test the binary
        echo "üß™ Testing binary..."
        ./dist/frp-batch-tester-${{ matrix.name }}${{ matrix.ext }} --version || echo "Version check failed, but build succeeded"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frp-batch-tester-${{ matrix.name }}
        path: dist/frp-batch-tester-${{ matrix.name }}${{ matrix.ext }}

  release:
    needs: [download-frp, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: frp-batch-tester-*
        path: artifacts
        merge-multiple: true

    - name: Create release summary
      run: |
        echo "=== Release Summary ===" > release_summary.txt
        echo "FRP Version: ${{ needs.download-frp.outputs.frp-version }}" >> release_summary.txt
        echo "Build Date: $(date -u)" >> release_summary.txt
        echo "" >> release_summary.txt
        echo "Binaries built:" >> release_summary.txt
        ls -la artifacts/ >> release_summary.txt

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/*
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## FRP Batch Tester Release
          
          This release includes embedded FRP binaries from version `${{ needs.download-frp.outputs.frp-version }}`.
          
          ### üöÄ Features
          - **Batch Testing Mode**: Run multiple frpc instances simultaneously
          - **Proxy Analysis Mode**: Intercept and analyze FRP protocol messages  
          - **Embedded Binaries**: No need to download frpc separately
          - **Multi-Platform**: Support for Windows, macOS, and Linux
          
          ### üìñ Usage
          
          **Batch Testing:**
          ```bash
          # Test with 10 concurrent connections
          ./frp-batch-tester --server your-server.com --token your-token --count 10
          
          # Test HTTP proxies
          ./frp-batch-tester --server your-server.com --token your-token --proxy-type http --count 5
