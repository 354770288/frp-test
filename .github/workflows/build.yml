name: Build FRP Scanner with Embedded Binaries

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  packages: read
  actions: read

jobs:
  download-frp:
    runs-on: ubuntu-latest
    outputs:
      frp-version: ${{ steps.get-version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get latest FRP version
      id: get-version
      run: |
        echo "=== Fetching FRP Release Information ==="
        RELEASE_JSON=$(curl -s https://api.github.com/repos/fatedier/frp/releases/latest)
        FRP_VERSION=$(echo "$RELEASE_JSON" | jq -r '.tag_name')
        
        echo "version=$FRP_VERSION" >> $GITHUB_OUTPUT
        echo "FRP Version: $FRP_VERSION"

    - name: Download FRP binaries
      run: |
        set -e
        mkdir -p binaries temp
        FRP_VERSION="${{ steps.get-version.outputs.version }}"
        
        echo "=== Downloading FRP binaries for version $FRP_VERSION ==="
        
        # Get release information
        RELEASE_JSON=$(curl -s https://api.github.com/repos/fatedier/frp/releases/latest)
        
        # Download function
        download_frpc() {
          local platform_display="$1"
          local goos="$2"
          local goarch="$3"
          local binary_name="$4"
          local output_name="$5"
          
          echo "=== Processing $platform_display ($goos/$goarch) ==="
          
          # Try different asset name patterns
          local patterns=()
          if [[ "$goos" == "windows" ]]; then
            patterns+=(
              "frp_${FRP_VERSION}_windows_${goarch}.zip"
              "frp_.*_windows_${goarch}.zip"
            )
          else
            patterns+=(
              "frp_${FRP_VERSION}_${goos}_${goarch}.tar.gz"
              "frp_.*_${goos}_${goarch}.tar.gz"
            )
          fi
          
          local asset_name=""
          for pattern in "${patterns[@]}"; do
            asset_name=$(echo "$RELEASE_JSON" | jq -r '.assets[].name' | grep -E "$pattern" | head -1 || echo "")
            if [[ -n "$asset_name" ]]; then
              echo "‚úì Found asset: $asset_name"
              break
            fi
          done
          
          if [[ -z "$asset_name" ]]; then
            echo "‚ùå No asset found for $platform_display"
            return 1
          fi
          
          # Get download URL
          local download_url
          download_url=$(echo "$RELEASE_JSON" | jq -r --arg name "$asset_name" '.assets[] | select(.name == $name) | .browser_download_url')
          
          echo "üì• Downloading: $download_url"
          
          # Download with retries
          local download_success=false
          for attempt in 1 2 3; do
            echo "   Attempt $attempt/3..."
            if curl -L -f --progress-bar --connect-timeout 30 --max-time 300 "$download_url" -o "temp/archive"; then
              download_success=true
              break
            else
              echo "   Download attempt $attempt failed"
              sleep 2
            fi
          done
          
          if [[ "$download_success" != true ]]; then
            echo "‚ùå Failed to download $asset_name after 3 attempts"
            return 1
          fi
          
          local file_size
          file_size=$(stat -c%s temp/archive)
          echo "‚úì Downloaded successfully ($file_size bytes)"
          
          # Clean temp and extract
          rm -rf temp/extracted
          mkdir -p temp/extracted
          cd temp/extracted
          
          local extracted=false
          
          if [[ "$asset_name" == *.zip ]]; then
            echo "üì¶ Extracting ZIP archive..."
            if unzip -q ../archive; then
              local found_binary
              found_binary=$(find . -name "$binary_name" -type f | head -1)
              if [[ -n "$found_binary" ]]; then
                cp "$found_binary" "../../binaries/$output_name"
                chmod +x "../../binaries/$output_name"
                extracted=true
                echo "‚úÖ Extracted $binary_name -> $output_name"
              else
                echo "‚ùå Binary '$binary_name' not found in ZIP"
                find . -name "frpc*" -type f | head -5 | sed 's/^/     Found: /'
              fi
            else
              echo "‚ùå Failed to extract ZIP archive"
            fi
          elif [[ "$asset_name" == *.tar.gz ]]; then
            echo "üì¶ Extracting TAR.GZ archive..."
            if tar -xzf ../archive; then
              local found_binary
              found_binary=$(find . -name "$binary_name" -type f | head -1)
              if [[ -n "$found_binary" ]]; then
                cp "$found_binary" "../../binaries/$output_name"
                chmod +x "../../binaries/$output_name"
                extracted=true
                echo "‚úÖ Extracted $binary_name -> $output_name"
              else
                echo "‚ùå Binary '$binary_name' not found in TAR.GZ"
                find . -name "frpc*" -type f | head -5 | sed 's/^/     Found: /'
              fi
            else
              echo "‚ùå Failed to extract TAR.GZ archive"
            fi
          fi
          
          cd ../..
          
          if [[ "$extracted" != true ]]; then
            return 1
          fi
          
          return 0
        }
        
        # Download binaries for each platform
        echo "=== Starting Downloads ==="
        
        # Windows
        download_frpc "Windows AMD64" "windows" "amd64" "frpc.exe" "frpc_windows_amd64.exe"
        download_frpc "Windows ARM64" "windows" "arm64" "frpc.exe" "frpc_windows_arm64.exe"
        
        # Linux 
        download_frpc "Linux AMD64" "linux" "amd64" "frpc" "frpc_linux_amd64"
        download_frpc "Linux ARM64" "linux" "arm64" "frpc" "frpc_linux_arm64"
        download_frpc "Linux ARM" "linux" "arm" "frpc" "frpc_linux_arm"
        
        # macOS
        download_frpc "macOS AMD64" "darwin" "amd64" "frpc" "frpc_darwin_amd64"
        download_frpc "macOS ARM64" "darwin" "arm64" "frpc" "frpc_darwin_arm64"
        
        echo ""
        echo "=== Download Summary ==="
        if [[ -d binaries && $(ls binaries/ 2>/dev/null | wc -l) -gt 0 ]]; then
          echo "‚úÖ Successfully downloaded binaries:"
          ls -la binaries/
          echo ""
          echo "üìä Platform Summary:"
          echo "   Windows: $(ls binaries/ | grep -c windows || echo 0)"
          echo "   Linux: $(ls binaries/ | grep -c linux || echo 0)"
          echo "   macOS: $(ls binaries/ | grep -c darwin || echo 0)"
          echo "   Total: $(ls binaries/ | wc -l)"
        else
          echo "‚ö†Ô∏è No binaries were successfully downloaded"
        fi

    - name: Upload FRP binaries
      uses: actions/upload-artifact@v4
      with:
        name: frp-binaries
        path: binaries/
        retention-days: 1

  build:
    needs: download-frp
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: windows
            goarch: amd64
            ext: .exe
            name: windows-amd64
          - goos: windows  
            goarch: arm64
            ext: .exe
            name: windows-arm64
          - goos: darwin
            goarch: amd64
            ext: ""
            name: macos-amd64
          - goos: darwin
            goarch: arm64
            ext: ""
            name: macos-arm64
          - goos: linux
            goarch: amd64
            ext: ""
            name: linux-amd64
          - goos: linux
            goarch: arm64
            ext: ""
            name: linux-arm64
          - goos: linux
            goarch: arm
            ext: ""
            name: linux-arm

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Download FRP binaries
      uses: actions/download-artifact@v4
      with:
        name: frp-binaries
        path: binaries/

    - name: Verify binaries
      run: |
        echo "=== Binary Check for ${{ matrix.goos }}/${{ matrix.goarch }} ==="
        
        if [[ -d binaries ]]; then
          echo "Available binaries:"
          ls -la binaries/ || echo "No binaries found"
          
          # Check for platform-specific binary
          required_binary="frpc_${{ matrix.goos }}_${{ matrix.goarch }}"
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            required_binary="${required_binary}.exe"
          fi
          
          if [[ -f "binaries/$required_binary" ]]; then
            file_size=$(stat -c%s "binaries/$required_binary")
            echo "‚úÖ Platform binary found: $required_binary ($file_size bytes)"
            
            # Verify it's a valid binary (basic check)
            if [[ $file_size -gt 1000000 ]]; then
              echo "‚úÖ Binary size looks valid (>1MB)"
            else
              echo "‚ö†Ô∏è Binary might be too small"
            fi
          else
            echo "‚ö†Ô∏è Platform binary not found: $required_binary"
            echo "   Available binaries that might match:"
            ls binaries/ | grep -E "(frpc_${{ matrix.goos }}|${{ matrix.goos }})" || echo "   None found"
          fi
        else
          echo "‚ö†Ô∏è No binaries directory found"
          mkdir -p binaries
        fi

    - name: Initialize Go module
      run: |
        if [[ ! -f go.mod ]]; then
          go mod init frp-scanner
          go mod tidy
        fi

    - name: Build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        
        # Build information
        BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
        VERSION=${GITHUB_REF#refs/tags/}
        if [[ ! $VERSION =~ ^v[0-9] ]]; then
          if [[ -n "${GITHUB_SHA}" ]]; then
            VERSION="dev-$(date +%Y%m%d)-${GITHUB_SHA:0:7}"
          else
            VERSION="dev-$(date +%Y%m%d)"
          fi
        fi
        FRP_VERSION="${{ needs.download-frp.outputs.frp-version }}"
        
        echo "=== Build Information ==="
        echo "Version: $VERSION"
        echo "Target: ${{ matrix.goos }}/${{ matrix.goarch }}"  
        echo "FRP Version: $FRP_VERSION"
        echo "Build Time: $BUILD_TIME"
        
        # Build the application
        OUTPUT_NAME="frp-scanner-${{ matrix.name }}${{ matrix.ext }}"
        
        go build \
          -ldflags="-s -w -X 'main.Version=$VERSION' -X 'main.BuildTime=$BUILD_TIME' -X 'main.FrpVersion=$FRP_VERSION'" \
          -o "dist/$OUTPUT_NAME" \
          main.go
        
        echo "‚úÖ Build successful!"
        echo "Output: dist/$OUTPUT_NAME"
        
        # Show file info
        ls -la "dist/$OUTPUT_NAME"
        
        # Basic verification
        file_size=$(stat -c%s "dist/$OUTPUT_NAME")
        if [[ $file_size -gt 5000000 ]]; then
          echo "‚úÖ Binary size looks good ($file_size bytes)"
        else
          echo "‚ö†Ô∏è Binary might be too small ($file_size bytes)"
        fi

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: frp-scanner-${{ matrix.name }}
        path: dist/frp-scanner-${{ matrix.name }}${{ matrix.ext }}

  release:
    needs: [download-frp, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: frp-scanner-*
        path: artifacts
        merge-multiple: true

    - name: Prepare release files
      run: |
        echo "=== Release Files ==="
        ls -la artifacts/
        
        # Create checksums
        cd artifacts
        sha256sum * > checksums.txt
        echo "Checksums created:"
        cat checksums.txt

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/*
        generate_release_notes: true
        body: |
          ## FRP Server Scanner Release
          
          **Built with embedded FRP binaries from version `${{ needs.download-frp.outputs.frp-version }}`**
          
          ### Features
          - üéØ **CIDR Support**: Scan entire network ranges (e.g., `10.10.124.0/22`)
          - üöÄ **Concurrent Scanning**: Configurable parallel testing
          - üîë **Token Authentication**: Validates FRP server access
          - üìä **Detailed Results**: Success/failure statistics with RunID extraction
          - üíæ **Auto-save Results**: Successful servers saved to file
          - üîß **Embedded FRP**: No need to install frpc separately
          
          ### Quick Start
          ```bash
          # Download for your platform and run
          ./frp-scanner-linux-amd64
          
          # Follow the prompts to enter:
          # - Target: 192.168.1.1 or 10.0.0.0/24  
          # - Token: your_frp_token
          # - Concurrency: 10
          # - Delay: 100ms
