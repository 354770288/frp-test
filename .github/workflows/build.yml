name: Build with Embedded FRP Binaries

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  download-frp:
    runs-on: ubuntu-latest
    outputs:
      frp-version: ${{ steps.get-version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get latest FRP version and assets
      id: get-version
      run: |
        echo "Fetching FRP release information..."
        RELEASE_JSON=$(curl -s https://api.github.com/repos/fatedier/frp/releases/latest)
        FRP_VERSION=$(echo "$RELEASE_JSON" | jq -r '.tag_name')
        
        echo "version=$FRP_VERSION" >> $GITHUB_OUTPUT
        echo "Latest FRP version: $FRP_VERSION"
        
        echo "Available assets:"
        echo "$RELEASE_JSON" | jq -r '.assets[].name' | sort

    - name: Download FRP binaries
      run: |
        set -e
        mkdir -p binaries temp
        FRP_VERSION="${{ steps.get-version.outputs.version }}"
        
        echo "=== Downloading FRP binaries for version $FRP_VERSION ==="
        
        # Get release information
        RELEASE_JSON=$(curl -s https://api.github.com/repos/fatedier/frp/releases/latest)
        
        # Define download function
        download_and_extract() {
          local platform_name="$1"
          local asset_pattern="$2"
          local binary_name="$3"
          local output_name="$4"
          
          echo "=== Processing $platform_name ==="
          
          # Find matching asset
          local asset_name
          asset_name=$(echo "$RELEASE_JSON" | jq -r --arg pattern "$asset_pattern" '.assets[] | select(.name | test($pattern)) | .name' | head -1)
          
          if [[ -z "$asset_name" || "$asset_name" == "null" ]]; then
            echo "❌ No asset found matching pattern: $asset_pattern"
            return 1
          fi
          
          echo "✓ Found asset: $asset_name"
          
          # Get download URL
          local download_url
          download_url=$(echo "$RELEASE_JSON" | jq -r --arg name "$asset_name" '.assets[] | select(.name == $name) | .browser_download_url')
          
          echo "📥 Downloading: $download_url"
          
          # Clean temp directory
          rm -rf temp/*
          
          # Download with curl (more reliable than wget)
          if ! curl -L -f --progress-bar "$download_url" -o "temp/archive"; then
            echo "❌ Failed to download $asset_name"
            return 1
          fi
          
          echo "✓ Downloaded successfully ($(stat -c%s temp/archive 2>/dev/null || echo "unknown") bytes)"
          
          # Extract based on file extension
          cd temp
          local extracted=false
          
          if [[ "$asset_name" == *.zip ]]; then
            echo "📦 Extracting ZIP archive..."
            if unzip -q archive 2>/dev/null; then
              # Find the binary file
              local found_binary
              found_binary=$(find . -name "$binary_name" -type f | head -1)
              if [[ -n "$found_binary" ]]; then
                cp "$found_binary" "../binaries/$output_name"
                chmod +x "../binaries/$output_name"
                extracted=true
                echo "✅ Extracted $binary_name -> $output_name"
              fi
            fi
          elif [[ "$asset_name" == *.tar.gz ]]; then
            echo "📦 Extracting TAR.GZ archive..."
            if tar -xzf archive 2>/dev/null; then
              # Find the binary file
              local found_binary
              found_binary=$(find . -name "$binary_name" -type f | head -1)
              if [[ -n "$found_binary" ]]; then
                cp "$found_binary" "../binaries/$output_name"
                chmod +x "../binaries/$output_name"
                extracted=true
                echo "✅ Extracted $binary_name -> $output_name"
              fi
            fi
          fi
          
          if [[ "$extracted" != true ]]; then
            echo "❌ Failed to extract $binary_name from $asset_name"
            echo "Archive contents:"
            if [[ "$asset_name" == *.zip ]]; then
              unzip -l archive 2>/dev/null | head -20 || echo "Cannot list ZIP contents"
            else
              tar -tzf archive 2>/dev/null | head -20 || echo "Cannot list TAR contents"
            fi
            cd ..
            return 1
          fi
          
          cd ..
          return 0
        }
        
        # Download binaries for each platform
        # Windows
        download_and_extract "Windows AMD64" "windows_amd64\.zip" "frpc.exe" "frpc_windows_amd64.exe"
        download_and_extract "Windows 386" "windows_386\.zip" "frpc.exe" "frpc_windows_386.exe"
        download_and_extract "Windows ARM64" "windows_arm64\.zip" "frpc.exe" "frpc_windows_arm64.exe"
        
        # Linux
        download_and_extract "Linux AMD64" "linux_amd64\.tar\.gz" "frpc" "frpc_linux_amd64"
        download_and_extract "Linux 386" "linux_386\.tar\.gz" "frpc" "frpc_linux_386"
        download_and_extract "Linux ARM64" "linux_arm64\.tar\.gz" "frpc" "frpc_linux_arm64"
        download_and_extract "Linux ARM" "linux_arm\.tar\.gz" "frpc" "frpc_linux_arm"
        
        # macOS
        download_and_extract "macOS AMD64" "darwin_amd64\.tar\.gz" "frpc" "frpc_darwin_amd64"
        download_and_extract "macOS ARM64" "darwin_arm64\.tar\.gz" "frpc" "frpc_darwin_arm64"
        
        echo "=== Download Summary ==="
        if [[ -d binaries && $(ls binaries/ 2>/dev/null | wc -l) -gt 0 ]]; then
          echo "Successfully downloaded binaries:"
          ls -la binaries/
          echo "Total binaries: $(ls binaries/ | wc -l)"
        else
          echo "❌ No binaries were successfully downloaded!"
          echo "Creating empty binaries directory to prevent artifact upload failure"
          touch binaries/.empty
        fi

    - name: Create fallback if no binaries downloaded
      run: |
        # Ensure binaries directory exists and has content for artifact upload
        mkdir -p binaries
        if [[ $(ls binaries/ 2>/dev/null | wc -l) -eq 0 ]]; then
          echo "No binaries downloaded, creating placeholder"
          echo "No FRP binaries were successfully downloaded during build" > binaries/README.txt
          echo "The application will need to download frpc at runtime or" >> binaries/README.txt
          echo "you can manually place frpc binaries in the same directory." >> binaries/README.txt
        fi

    - name: Upload FRP binaries
      uses: actions/upload-artifact@v4
      with:
        name: frp-binaries
        path: binaries/
        retention-days: 1
        if-no-files-found: warn

  build:
    needs: download-frp
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: windows
            goarch: amd64
            ext: .exe
            name: windows-amd64
          - goos: windows
            goarch: 386
            ext: .exe
            name: windows-386
          - goos: windows
            goarch: arm64
            ext: .exe
            name: windows-arm64
          - goos: darwin
            goarch: amd64
            ext: ""
            name: darwin-amd64
          - goos: darwin
            goarch: arm64
            ext: ""
            name: darwin-arm64
          - goos: linux
            goarch: amd64
            ext: ""
            name: linux-amd64
          - goos: linux
            goarch: 386
            ext: ""
            name: linux-386
          - goos: linux
            goarch: arm64
            ext: ""
            name: linux-arm64
          - goos: linux
            goarch: arm
            ext: ""
            name: linux-arm

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Download FRP binaries
      uses: actions/download-artifact@v4
      with:
        name: frp-binaries
        path: binaries/
      continue-on-error: true

    - name: Check downloaded binaries
      run: |
        echo "=== Checking Downloaded FRP Binaries ==="
        if [[ -d binaries ]]; then
          echo "Binaries directory contents:"
          ls -la binaries/
          
          # Check for the specific binary we need
          required_binary="frpc_${{ matrix.goos }}_${{ matrix.goarch }}"
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            required_binary="${required_binary}.exe"
          fi
          
          if [[ -f "binaries/$required_binary" ]]; then
            echo "✅ Found required binary: $required_binary"
            file_size=$(stat -c%s "binaries/$required_binary" 2>/dev/null || echo "0")
            echo "   Size: $file_size bytes"
            if [[ "$file_size" -gt 1000000 ]]; then
              echo "   ✅ Binary size looks good"
            else
              echo "   ⚠️ Binary seems small, might be corrupted"
            fi
          else
            echo "⚠️ Required binary not found: $required_binary"
            echo "   Build will continue without embedded binary for this platform"
          fi
        else
          echo "⚠️ No binaries directory found"
          mkdir -p binaries
          echo "placeholder" > binaries/.empty
        fi

    - name: Initialize Go module
      run: |
        if [[ ! -f go.mod ]]; then
          go mod init github.com/yourusername/frp-batch-tester
        fi
        go mod tidy

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        
        # Set build info
        BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
        VERSION=${GITHUB_REF#refs/tags/}
        if [[ ! $VERSION =~ ^v[0-9] ]]; then
          if [[ -n "$GITHUB_SHA" ]]; then
            VERSION="dev-${GITHUB_SHA:0:7}"
          else
            VERSION="dev-$(date +%Y%m%d)"
          fi
        fi
        FRP_VERSION="${{ needs.download-frp.outputs.frp-version }}"
        
        echo "=== Building Binary ==="
        echo "  Version: $VERSION"
        echo "  Build Time: $BUILD_TIME"
        echo "  FRP Version: $FRP_VERSION"
        echo "  Target: ${{ matrix.goos }}/${{ matrix.goarch }}"
        echo "  CGO_ENABLED: $CGO_ENABLED"
        
        # Build the binary
        go build \
          -ldflags="-s -w -X 'main.Version=$VERSION' -X 'main.BuildTime=$BUILD_TIME' -X 'main.FrpVersion=$FRP_VERSION'" \
          -o dist/frp-batch-tester-${{ matrix.name }}${{ matrix.ext }} \
          main.go
        
        echo "✅ Build completed successfully"
        echo "Built binary info:"
        ls -la dist/
        
        # Test the binary (version check)
        echo "🧪 Testing binary..."
        if ./dist/frp-batch-tester-${{ matrix.name }}${{ matrix.ext }} --version 2>/dev/null; then
          echo "✅ Binary version check passed"
        else
          echo "⚠️ Binary version check failed, but build succeeded"
        fi

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: frp-batch-tester-${{ matrix.name }}
        path: dist/frp-batch-tester-${{ matrix.name }}${{ matrix.ext }}
        retention-days: 30

  release:
    needs: [download-frp, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: frp-batch-tester-*
        path: artifacts
        merge-multiple: true

    - name: List release artifacts
      run: |
        echo "=== Release Artifacts ==="
        find artifacts -type f | sort
        echo ""
        echo "Artifact details:"
        find artifacts -type f -exec ls -la {} \;

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/*
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## 🎉 FRP Batch Tester Release
          
          Multi-platform testing tool with embedded FRP binaries from `${{ needs.download-frp.outputs.frp-version }}`.
          
          ### ✨ Features
          - **Batch Testing**: Run multiple frpc instances simultaneously
          - **Protocol Analysis**: Intercept and decode FRP messages
          - **Embedded Binaries**: No separate frpc download needed
          - **Cross-Platform**: Windows, macOS, and Linux support
          
          ### 🚀 Quick Start
          
          ```bash
          # Download for your platform and make executable (Linux/macOS)
          chmod +x frp-batch-tester-*
          
          # Batch test with 10 instances
          ./frp-batch-tester --server your-server.com --token your-token --count 10
          
          # Protocol analysis mode
          ./frp-batch-tester --mode proxy --server your-server.com --token your-token
